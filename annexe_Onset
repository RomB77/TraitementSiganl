"""
global C
C = np.abs(librosa.cqt(x, sr=fs, hop_length=hop_length, 
                       bins_per_octave=12, n_bins=n_bins))

# Convertir en dB pour faciliter la visualisation

C_dB = librosa.amplitude_to_db(C, ref=np.max)
new_cqt= cqt_thresholded(C_dB,thres=cqt_threshold)
"""

filename = f'{path}/test1.wav'
x, fs = librosa.load(filename, sr=None, mono=True, duration=12)

#nettoyer les faibles magnitudes
def fft_thresholded(cqt,thres=cqt_threshold):
    new_cqt=np.copy(cqt)
    new_cqt[new_cqt<thres]=-120
    return new_cqt
    
C= np.abs(librosa.stft(x, n_fft=n_fft, hop_length=hop_length))
C_dB=librosa.amplitude_to_db(S, ref=np.max)
new_C= fft_thresholded(C_dB,thres=cqt_threshold)

# Calcul des fréquences associées
fft_freqs = librosa.fft_frequencies(sr=fs, n_fft=n_fft)

# Affichage du spectrogramme CQT
plt.figure(figsize=(18, 8))
librosa.display.specshow(new_C, sr=fs, hop_length=hop_length, 
                         x_axis='time', y_axis='cqt_note', cmap='coolwarm')
global onsets
onsets=calc_onset(new_cqt,pre_post_max, True)
plt.vlines(onsets[0], 0, fs/2, color='k', alpha=0.8)

plt.colorbar(label='Amplitude (dB)')
plt.title('Spectrogramme (fft)')
plt.xlabel('Temps (s)')
plt.ylabel('Notes (CQT)')
plt.ylim([librosa.note_to_hz('B2'),librosa.note_to_hz('B6')])
plt.show()
